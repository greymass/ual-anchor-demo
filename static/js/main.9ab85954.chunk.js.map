{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["chains","chainId","name","rpcEndpoints","protocol","host","port","getTransaction","account","requestPermission","actions","authorization","actor","permission","data","from","to","quantity","getTransactionAmount","memo","symbol","TestApp","Component","constructor","props","super","purchase","a","activeUser","ual","accountName","chain","demoTransaction","signTransaction","expireSeconds","blocksBehind","result","setState","message","setTimeout","resetMessage","console","info","error","this","renderLoggedInView","state","style","styles","announcementBar","baseText","type","onClick","button","blueBG","td","logout","renderLoginButton","showModal","buttonText","render","UALWrapper","setChain","event","target","value","search","window","location","URLSearchParams","get","available","filter","c","anchor","Anchor","appName","ledger","Ledger","scatter","Scatter","container","defaultValue","onChange","select","map","key","authenticators","TestAppConsumer","display","backgroundColor","alignItems","justifyContent","height","marginTop","flexDirection","padding","textAlign","borderRadius","color","fontSize","fontWeight","marginBottom","width","top","position","withUAL","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ab85954.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Anchor } from 'ual-anchor'\nimport { Ledger } from 'ual-ledger'\nimport { Scatter } from 'ual-scatter'\nimport { UALProvider, withUAL } from 'ual-reactjs-renderer'\n\nconst chains = [{\n  chainId: 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473',\n  name: 'Jungle 2 (Testnet)',\n  rpcEndpoints: [{\n    protocol: 'https',\n    host: 'jungle.greymass.com',\n    port: 443,\n  }]\n},{\n  chainId: '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840',\n  name: 'Jungle 3 (Testnet)',\n  rpcEndpoints: [{\n    protocol: 'https',\n    host: 'jungle3.greymass.com',\n    port: 443,\n  }]\n},{\n  chainId: 'f11d5128e07177823924a07df63bf59fbd07e52c44bc77d16acc1c6e9d22d37b',\n  name: 'Lynx (Testnet)',\n  rpcEndpoints: [{\n    protocol: 'https',\n    host: 'lynxtestnet.greymass.com',\n    port: 443,\n  }]\n},{\n  chainId: '1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f',\n  name: 'Telos (Testnet)',\n  rpcEndpoints: [{\n    protocol: 'https',\n    host: 'testnet.eos.miami',\n    port: 443,\n  }]\n},{\n  chainId: 'f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12',\n  name: 'WAX (Testnet)',\n  rpcEndpoints: [{\n    protocol: 'https',\n    host: 'waxtestnet.greymass.com',\n    port: 443,\n  }]\n}];\n\nconst getTransaction = (account, requestPermission, chainId) => {\n  return {\n    actions: [{\n      account: 'eosio.token',\n      name: 'transfer',\n      authorization: [{ actor: account, permission: requestPermission }],\n      data: {\n        from: account,\n        to: 'teamgreymass',\n        quantity: getTransactionAmount(chainId),\n        memo: 'ual-anchor-demo'\n      },\n    }],\n  }\n}\n\nconst getTransactionAmount = (chainId) => {\n  let symbol = 'EOS'\n  let quantity = '0.0001'\n  switch (chainId) {\n    case 'f11d5128e07177823924a07df63bf59fbd07e52c44bc77d16acc1c6e9d22d37b': {\n      symbol = 'LNX'\n      quantity = '0.00000001'\n      break\n    }\n    case '1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f': {\n      symbol = 'TLOS'\n      break\n    }\n    case 'f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12': {\n      symbol = 'WAX'\n      quantity = '0.00000001'\n      break\n    }\n  }\n  return `${quantity} ${symbol}`\n}\n\nclass TestApp extends Component {\n  static propTypes = {\n    ual: PropTypes.shape({\n      activeUser: PropTypes.object,\n      activeAuthenticator: PropTypes.object,\n      logout: PropTypes.func,\n      showModal: PropTypes.func,\n    }).isRequired,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      chainId: props.chainId,\n      message: '',\n    }\n  }\n\n  purchase = async () => {\n    const { ual: { activeUser } } = this.props\n    try {\n      const { accountName, chain, requestPermission } = activeUser\n      const { chainId } = chain\n      const demoTransaction = getTransaction(accountName, requestPermission, chainId)\n      const result = await activeUser.signTransaction(demoTransaction, { expireSeconds: 120, blocksBehind: 3 })\n      this.setState({\n        message: `Transfer Successful!`,\n      }, () => {\n        setTimeout(this.resetMessage, 5000)\n      })\n      console.info('SUCCESS:', result)\n    } catch (e) {\n      console.error('ERROR:', e)\n    }\n  }\n\n  resetMessage = () => this.setState({ message: '' })\n\n  renderLoggedInView = () => (\n    <>\n      {!!this.state.message\n        && (\n          <div style={styles.announcementBar}>\n            <p style={styles.baseText}>{this.state.message}</p>\n          </div>\n        )\n      }\n      <button type='button' onClick={this.purchase} style={{ ...styles.button, ...styles.blueBG }}>\n        <p style={styles.baseText}>{`Transfer 0.0001`}</p>\n      </button>\n      <table>\n        <tbody>\n          <tr>\n            <td style={styles.td}>Blockchain</td>\n            <td style={styles.td}>{this.props.ual.chains[0].name}</td>\n          </tr>\n          <tr>\n            <td style={styles.td}>Account</td>\n            <td style={styles.td}>{this.props.ual.activeUser.accountName}</td>\n          </tr>\n          <tr>\n            <td style={styles.td}>Permission</td>\n            <td style={styles.td}>{this.props.ual.activeUser.requestPermission}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button type='button' onClick={this.props.ual.logout} style={styles.logout}>\n        <p>Logout</p>\n      </button>\n    </>\n  )\n\n  renderLoginButton = () => (\n    <button type='button' onClick={this.props.ual.showModal} style={styles.button}>\n      <p style={{buttonText: styles.buttonText, baseText: styles.baseText}}>Login using {this.props.ual.chains[0].name}</p>\n    </button>\n  )\n\n  render() {\n    const { ual: { activeUser } } = this.props\n    return (activeUser) ? this.renderLoggedInView() : this.renderLoginButton()\n  }\n}\n\nclass UALWrapper extends Component {\n  constructor(props) {\n    super(props)\n    const search = window.location.search;\n    const params = new URLSearchParams(search);\n    const chainId = params.get('chain');\n    this.state = {\n      chainId: chainId || chains[0].chainId\n    }\n  }\n  setChain = (event) => this.setState({ chainId: event.target.value })\n  render () {\n    const { chainId } = this.state\n    const { available } = this.props\n    const [ chain ] = available.filter((c) => c.chainId === chainId)\n    if (!chain) {\n      return (\n        <div>Invalid Chain ID</div>\n      )\n    }\n    const anchor = new Anchor([chain], { appName: 'ual-anchor-demo' })\n    const ledger = new Ledger([chain])\n    const scatter = new Scatter([chain], { appName: 'ual-anchor-demo' })\n    return (\n      <div style={styles.container}>\n        <p>\n          <select\n            defaultValue={chainId}\n            onChange={this.setChain}\n            style={styles.select}\n          >\n            {chains.map((chain) => (\n              <option\n                key={chain.chainId}\n                value={chain.chainId}\n              >\n                {chain.name}\n              </option>\n            ))}\n          </select>\n        </p>\n        <UALProvider\n          appName='Anchor + Authenticator Test App'\n          authenticators={[anchor, ledger, scatter]}\n          chains={[chain]}\n          key={chain.chainId}\n        >\n          <TestAppConsumer />\n        </UALProvider>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'top',\n    height: '100vh',\n    marginTop: '10vh',\n    flexDirection: 'column',\n  },\n  button: {\n    padding: '10px 60px',\n    backgroundColor: '#EA2E2E',\n    textAlign: 'center',\n    borderRadius: 5,\n    color: '#FFFFFF',\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: '2em',\n  },\n  select: {\n    textAlign: 'center',\n    borderRadius: 5,\n    fontSize: 24,\n    fontWeight: 'bold',\n    width: '200px',\n  },\n  logout: {\n    marginTop: 20,\n  },\n  baseText: {\n    color: '#fff',\n    fontSize: 18,\n  },\n  blueBG: {\n    backgroundColor: '#447DD8',\n  },\n  announcementBar: {\n    width: '100%',\n    padding: '10px 50px 10px 20px',\n    textAlign: 'center',\n    backgroundColor: '#3de13d',\n    top: 0,\n    position: 'absolute',\n    alignItems: 'center',\n  },\n}\n\nconst TestAppConsumer = withUAL(TestApp)\n\nconst App = () => (\n  <UALWrapper available={chains} />\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}